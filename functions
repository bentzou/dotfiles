#!/bin/bash

set -o nounset

function backup () {
   # purpose: adds suffix to file or directory
   # usage: backup <file|directory> [suffix=.bkp]
   # example: backup myfile

   (( $# == 1 || $# == 2 )) || return 1

   local suffix=${2:-bak}
   local in_path="$(builtin cd "$(dirname "$1")"; builtin pwd)/$(basename "$1")"
   local out_path="$in_path.$suffix"
   local index=2

   while [[ -f "$out_path" || -d "$out_path" ]]; do
      out_path="${out_path}${index}"
      (( index++ ))
   done

   mv -iv "$in_path" "$out_path"
}

function set_terminal_title () {
   # purpose: sets the terminal title
   # usage: set_terminal_title <title>
   # example: set_terminal_title "my_title"

   (( $# == 1 )) && echo -ne "\033]0;$1\007" || return 1
}

function indent () {
   # purpose: indents every input line with spaces.
   # usage: ... | indent [num_tabs=1] [num_spaces_per_tab=3]
   # example: echo hello world | indent

   (( 0 <= $# && $# <= 2 )) || return 1

   local tabs=${1:-1}
   local num_spaces=${2:-3}
   local spaces=$(printf "%0.s " $(seq 1 $((num_spaces * ${tabs#-}))))

   (( tabs >= 0 )) && sed "s/^/${spaces}/" || sed "s/^${spaces}//"
}

function join () {
   # purpose: joins a list of strings with a character delimiter
   # usage: join <delimiter> <strings...>
   # example: join , hello world   # hello,world

   (( $# < 2 )) && return 1

   local IFS="$1"
   shift
   echo "$*"
}

function path () {
   # purpose: prints pwd or the full path of an argument
   # usage: path [file|directory]
   # example: path pom.xml   # /project/pom.xml

   (( $# == 0 )) && pwd && return
   for filename in "${@:1}"; do
      echo "$(builtin cd "$(dirname "$filename")"; pwd)/$(basename "$filename")"
   done
}

function append () {
   # purpose: appends suffix to every input line
   # usage: ... | append [suffix]
   # example: echo hello world | append " today"    # hello world today

   awk '$0=$0"'"$*"'"'
}

function rmcolor () {
   # purpose: removes color escape codes from input
   # usage: ... | rmcolor
   # example: create_color_output | rmcolor

	sed $'s,\x1b\\[[0-9;]*[a-zA-Z],,g'
}

function endcolor () {
   # purpose: ends color output by appending default color code
   # usage:  ... | endcolor
   # example: create_color_output | endcolor

   append '\33[0m'
}

function strip () {
   # purpose: removes start and ending spaces
   # usage: ... | strip
   # example: echo " hello world " | strip

   { (( $# == 0 )) && cat || echo "$*"; } | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

function press_any_to_continue () {
   # purpose: waits for any button press
   # usage: press_any_to_continue [prompt]
   # example: press_any_to_continue "Press enter to continue... "

   read -n1 -r -s -p "${*:-}"
   echo
}

function lines () {
   # purpose: prints lines for line numbers start to end
   # usage: ... | lines <start> [end=EOF]
   # example: cat myfile | lines 2 4
   # usage: lines <start> <end> <file>
   # example: lines 2 4 myfile

   (( $# < 1 || $# > 3 )) && return 1
   (( $# >= 2 )) && (( $1 > $2 )) && return 1

   sed -n ${1},${2:-$}p $((( $# == 3 )) && echo "$3")
}
