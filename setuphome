#!/bin/bash


SOURCE_DIR="$(builtin cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SOURCE_DIR"/functions

link_config () {
   (( $# != 2 )) && return 1

   local config_name="$(basename $1)"
   local in_path="$1"
   local out_path="$2"

   if [[ -L "$out_path" && "$in_path" == "$(readlink "$out_path")" ]]; then
      echo "existing $config_name: $out_path -> $in_path"
      return
   fi
   
   if [ -f "$out_path" ] || [[ -L "$out_path" && "$in_path" != "$(readlink "$out_path")" ]]; then
      echo -n "existing $config_name was backed up"
      backup "$out_path"
   fi

   echo -n "new $config_name symlinked: "
   ln -vs "$in_path" "$out_path"
}

init_bash () {
   echo "Setting up bashrc"

   {
      if [ ! -f  "$HOME/.bash_profile" ]; then
         touch "$HOME/.bash_profile"
         echo "new .bash_profile created"
      else
         echo "existing .bash_profile"
      fi

      if ! grep "source '$SOURCE_DIR/bashrc'" "$HOME/.bash_profile" >/dev/null; then
         echo "source '$SOURCE_DIR/bashrc'" >> "$HOME/.bash_profile"
         echo "bashrc added to bash profile"
      else
         echo "existing source bashrc"
      fi
   } | indent
}

init_git () {
   echo "Setting up git"

   {
      local cur_config="$(git config --global include.path 2>/dev/null)"
      local new_config="$SOURCE_DIR/gitconfig"

      if [ -z "$cur_config" ]; then
         echo "gitconfig added to global gitconfig"
         git config --global include.path "$SOURCE_DIR/gitconfig"
      else
         echo "existing gitconfig: $new_config"
      fi
   } | indent
}

init_readline () {
   echo "Setting up inputrc"
   link_config "$SOURCE_DIR/inputrc" "$HOME/.inputrc" | indent
}

init_tmux () {
   echo "Setting up tmux"
   link_config "$SOURCE_DIR/tmuxconf" "$HOME/.tmux.conf" | indent
}

init_vim () {
   echo "Setting up vim"
   {
      # set up directories
      declare -a vim_dirs=("$HOME/.vim" "$HOME/.vim/undodir" "$HOME/.vim/autoload" "$HOME/.vim/bundle")
      local vim_dir

      for vim_dir in "${vim_dirs[@]}"; do
         if [[ -d "$vim_dir" ]]; then
            echo "existing dir: $vim_dir"
         else
            mkdir -pv "$vim_dir"
         fi
      done

      # install pathogen
      if [ ! -f "$HOME/.vim/autoload/pathogen.vim" ]; then
         curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
         [ $? -eq 0 ] && echo "pathogen installed" || echo "error installing pathogen"
      else
         echo "existing pathogen install"
      fi

      # download plugins
      if [ ! -d "$HOME/.vim/bundle/kotlin-vim" ]; then
         git clone https://github.com/udalov/kotlin-vim ~/.vim/bundle/kotlin-vim
         [ $? -eq 0 ] && echo "kotlin-vim installed" || echo "error installing kotlin-vim"
      else
         echo "existing plugin: kotlin-vim"
      fi
      
      # set up vimrc
      link_config "$SOURCE_DIR/vimrc" "$HOME/.vimrc"
   } | indent
}

init_hushlogin () {
   echo "Setting up hushlogin"

   if [ ! -f "$HOME/.hushlogin" ]; then
      touch "$HOME/.hushlogin"
   else
      echo "existing .hushlogin"
   fi | indent
}

theresnoplacelikehome () {
   git submodule update --init
   chsh -s /bin/bash
   echo "export BASH_SILENCE_DEPRECATION_WARNING=1" >> ~/.bash_profile

   init_bash
   init_hushlogin
   init_readline
   init_git
   init_tmux
   init_vim

   source "$HOME/.bash_profile"
}

theresnoplacelikedocker () {
   (( $# != 1 )) && echo "missing param: container" >&2 && return 1

   local container=$1

   docker cp "$SOURCE_DIR" $container:/tmp/
   docker exec "$container" bash -c 'echo export PS1_OVERRIDE='$container' >> $HOME/.bashrc'
   docker exec "$container" bash -c 'echo source /tmp/dotfiles/bashrc >> $HOME/.bashrc'
   docker exec "$container" bash -c 'source /tmp/dotfiles/bashrc; theresnoplacelikehome'
}

_running_docker () {
   _complete_using "$(docker ps --format '{{.Names}}')"
}

complete -F _running_docker theresnoplacelikedocker
