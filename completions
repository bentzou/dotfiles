#!/bin/bash


# support completion method
_complete_using () {
   local cur="${COMP_WORDS[COMP_CWORD]}"
   COMPREPLY=($(compgen -W "$1" -- ${cur}))
}


# SSH
# completion entrypoint
_ssh_hosts() {
   awk '/^Host/ {print $2}' $HOME/.ssh/config
}

_ssh () {
   _complete_using "$(_ssh_hosts)"
}


# DOCKER
_docker_running_containers () {
   docker ps --format '{{.Names}}'
}

_docker () {
   local supported_commands="cp exec images inspect ps pull start stop"
   if (( COMP_CWORD == 1 )); then
      _complete_using "$supported_commands"
      return
   fi

   if (( COMP_CWORD == 2 )); then
      local docker_command="${COMP_WORDS[1]}"
      case "$docker_command" in
         stop)      _complete_using "$(_docker_running_containers)";;
      esac
   fi
}


# GIT
# support methods
_git_branches () {
   echo -e "$(git branch | tr '*' ' ' | awk '{print $1}')"
}

_git_current_branch () {
   git branch | awk -F' ' '/^\*/ {print $2}'
}

_git_staged_files () {
   echo -e "$(git status --porcelain | awk '$1=="A" {print $2}')"
}

_git_unstaged_files () {
   echo -e "$(git status --porcelain | awk '$1 ~ /\?\?|M/ {print $2}')"
}

# completion entrypoint
_git () {
   git branch &>/dev/null || return

   local supported_commands="add blame branch checkout commit diff pull push rebase status unstage"
   if (( COMP_CWORD == 1 )); then
      _complete_using "$supported_commands"
      return
   fi

   if (( COMP_CWORD == 2 )); then
      local git_command="${COMP_WORDS[1]}"
      case "$git_command" in
         add)      _complete_using "$(_git_unstaged_files)";;
         branch)   _complete_using "$(_git_branches)";;
         checkout) _complete_using "$(_git_branches)";;
         commit)   _complete_using "-m";;
         diff)     _complete_using "--cached";;
         push)     COMPREPLY="--set-upstream origin $(_git_current_branch)";;
         rebase)   _complete_using "--continue";;
         unstage)  _complete_using "$(_git_staged_files)";;
      esac
   fi
}


# JAVA
_java () {
   if (( COMP_CWORD == 1 )); then
      _complete_using "-jar"
      return
   fi

   if (( COMP_CWORD == 2 )); then
      local jar_param="${COMP_WORDS[1]}"
      case "$jar_param" in
         "-jar")  _complete_using "$(find . -iname "*.jar")"
      esac
   fi
}


# MAKEFILE
_make () {
   [ -f Makefile ] || return
   _complete_using "$(make -pnr | egrep '^[a-zA-Z0-9\-]*:' | cut -d: -f1 | grep -v Makefile)"
}


# MAVEN
_mvn () {
   [ -f pom.xml ] || return

   local supported_commands="clean compile test package install"
   if (( COMP_CWORD == 1 )); then
      _complete_using "$supported_commands"
      return
   fi

   if (( COMP_CWORD >= 2 )); then
      local last_index=$((COMP_CWORD-1))
      local phase="${COMP_WORDS[$last_index]}"

      case "$phase" in
         install)    _complete_using "-DskipTests";;
         *)          _complete_using "$supported_commands -DskipTests";;
      esac
   fi
}


# ENABLE COMPLETIONS
complete -F _docker docker
complete -F _java java
complete -F _make make
complete -F _mvn mvn
complete -F _ssh ssh
complete -o default -F _git git
complete -o plusdirs -f -X '!*.py' python
